name: release-on-merge

permissions:
  contents: write
  pull-requests: read

on:
  pull_request:
    types: [closed]

jobs:
  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    environment: philips-prod
    runs-on: ubuntu-latest
    env:
      SOURCE_FOLDER: solutions
      RELEASE_FOLDER: out/release
    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      - name: Extract solution metadata block
        id: meta
        run: |
          set -euo pipefail
          body='${{ github.event.pull_request.body }}'
          json=$(printf "%s" "$body" | awk '/<!--POWER_SOLUTION_METADATA_START-->/, /<!--POWER_SOLUTION_METADATA_END-->/' | sed -e '1d;$d')
          echo "$json"
          echo "$json" > metadata.json
          solution=$(jq -r '.solution' metadata.json 2>/dev/null || echo HealthcareSystem)
          version=$(jq -r '.version'  metadata.json 2>/dev/null || echo 1.0.0.0)

          if [ -z "$version" ] || ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version missing or invalid, defaulting to 1.0.0.0"
            version=1.0.0.0
          fi

          echo "solution=$solution" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Resolved: solution=$solution version=$version"

      - name: Verify solution source folder
        run: |
          set -e
          path="${SOURCE_FOLDER}/${{ steps.meta.outputs.solution }}"
          if [ ! -d "$path" ]; then
            echo "Expected solution folder not found: $path"
            ls -R .
            exit 1
          fi
          echo "Found solution folder: $path"

      - name: Prepare release folder
        run: mkdir -p "$RELEASE_FOLDER"

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Pack solution (managed)
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-folder: ${{ env.SOURCE_FOLDER }}/${{ steps.meta.outputs.solution }}
          solution-file: ${{ env.RELEASE_FOLDER }}/${{ steps.meta.outputs.solution }}.zip
          solution-type: Managed

      - name: Upload managed solution artifact
        uses: actions/upload-artifact@v4
        with:
          name: managedSolutions
          path: ${{ env.RELEASE_FOLDER }}/${{ steps.meta.outputs.solution }}.zip

      - name: Create tag (if absent)
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          tag="v${{ steps.meta.outputs.version }}"
          if git rev-parse -q --verify "refs/tags/$tag" >/dev/null; then
            echo "Tag $tag already exists locally."
          else
            git tag -a "$tag" -m "Release ${{ steps.meta.outputs.solution }} v${{ steps.meta.outputs.version }}"
          fi
          if git ls-remote --tags origin | grep -q "refs/tags/$tag$"; then
            echo "Tag $tag already exists on remote, skipping push."
          else
            git push origin "$tag"
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.meta.outputs.version }}
          name: "${{ steps.meta.outputs.solution }} v${{ steps.meta.outputs.version }}"
          body: |
            Automated release from merged PR #${{ github.event.pull_request.number }}
          files: |
            ${{ env.RELEASE_FOLDER }}/${{ steps.meta.outputs.solution }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Import managed solution to production
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ secrets.POWERPLATFORM_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-file: ${{ env.RELEASE_FOLDER }}/${{ steps.meta.outputs.solution }}.zip
          force-overwrite: true
          publish-changes: true          