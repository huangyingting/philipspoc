name: release-all-in-one-cn

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: "Solution name"
        required: false
        default: HealthcareSystemCN
      solution_version:
        description: "Solution version (semantic, prefixed with v)"
        required: false
        default: v1.0.0.0
  release:
    types: [published]

permissions:
  contents: write

jobs:
  export-solution:
    environment: philips-dev-cn
    runs-on: ubuntu-latest
    outputs:
      solution_name: ${{ steps.resolve.outputs.solution_name }}
      solution_version: ${{ steps.resolve.outputs.solution_version }}
      export_folder: ${{ steps.resolve.outputs.export_folder }}
      release_folder: ${{ steps.resolve.outputs.release_folder }}
    steps:
      - name: Resolve variables
        id: resolve
        shell: bash
        run: |
          SOLUTION_NAME="${{ github.event.inputs.solution_name }}"
          [ -z "$SOLUTION_NAME" ] && SOLUTION_NAME="HealthcareSystem"

          if [ "${{ github.event_name }}" = "release" ]; then
            RAW_VERSION="${{ github.event.release.tag_name }}"
          else
            RAW_VERSION="${{ github.event.inputs.solution_version }}"
          fi
          [ -z "$RAW_VERSION" ] && RAW_VERSION="v1.0.0.0"

          # Strip leading v if present
          SOLUTION_VERSION="${RAW_VERSION#v}"

          EXPORT_FOLDER="out/exported"
          RELEASE_FOLDER="out/release"

          echo "Resolved:"
          echo "  EVENT=${{ github.event_name }}"
          echo "  BASE_NAME=${BASE_NAME}"
          echo "  RAW_VERSION=${RAW_VERSION}"
          echo "  SOLUTION_VERSION=${SOLUTION_VERSION}"
          echo "  SOLUTION_NAME=${SOLUTION_NAME}"
          echo "  EXPORT_FOLDER=${EXPORT_FOLDER}"
          echo "  RELEASE_FOLDER=${RELEASE_FOLDER}"

          {
            echo "SOLUTION_NAME=${SOLUTION_NAME}"
            echo "SOLUTION_VERSION=${SOLUTION_VERSION}"
            echo "EXPORT_FOLDER=${EXPORT_FOLDER}"
            echo "RELEASE_FOLDER=${RELEASE_FOLDER}"
          } >> "$GITHUB_ENV"

          {
            echo "solution_name=${SOLUTION_NAME}"
            echo "solution_version=${SOLUTION_VERSION}"
            echo "export_folder=${EXPORT_FOLDER}"
            echo "release_folder=${RELEASE_FOLDER}"
          } >> "$GITHUB_OUTPUT"

      - name: Install power platform tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Set online solution version
        uses: microsoft/powerplatform-actions/set-online-solution-version@v1
        with:
          environment-url: ${{ secrets.POWERPLATFORM_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          name: ${{ env.SOLUTION_NAME }}
          version: ${{ env.SOLUTION_VERSION }}

      - name: Export solution (managed)
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ secrets.POWERPLATFORM_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ env.SOLUTION_NAME }}
          managed: true
          solution-output-file: ${{ env.EXPORT_FOLDER }}/${{ env.SOLUTION_NAME }}.zip
          cloud: China

      - name: Upload managed solution artifact
        uses: actions/upload-artifact@v4
        with:
          name: managedSolutions
          path: ${{ env.EXPORT_FOLDER }}/${{ env.SOLUTION_NAME }}.zip

      - name: Upload asset to existing release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.EXPORT_FOLDER }}/${{ env.SOLUTION_NAME }}.zip

  release-to-prod:
    needs: [export-solution]
    environment: philips-prod-cn
    runs-on: ubuntu-latest
    env:
      SOLUTION_NAME: ${{ needs.export-solution.outputs.solution_name }}
      RELEASE_FOLDER: ${{ needs.export-solution.outputs.release_folder }}
    steps:
      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Download managed solution artifact
        uses: actions/download-artifact@v4
        with:
          name: managedSolutions
          path: ${{ env.RELEASE_FOLDER }}

      - name: Verify artifact presence
        shell: bash
        run: |
          ls -al "${{ env.RELEASE_FOLDER }}"
          test -f "${{ env.RELEASE_FOLDER }}/${{ env.SOLUTION_NAME }}.zip"
          echo "Using version ${SOLUTION_VERSION}"

      - name: Import managed solution to production
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ secrets.POWERPLATFORM_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-file: ${{ env.RELEASE_FOLDER }}/${{ env.SOLUTION_NAME }}.zip
          force-overwrite: true
          publish-changes: true
          cloud: China
