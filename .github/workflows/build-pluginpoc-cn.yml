name: Build Power Platform Plugin

on:
  push:
    branches: [ main ]
    paths:
      - 'pluginpoc/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'pluginpoc/**'

jobs:
  build-and-deploy-cn:
    runs-on: windows-latest
    environment: philips-dev-cn
    env:
      PROJECT_PATH: pluginpoc/pluginpoc.csproj
      CONFIG: Debug
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET (for tooling)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore $env:PROJECT_PATH

      - name: Build (generates nupkg & snupkg)
        run: dotnet build $env:PROJECT_PATH -c $env:CONFIG --no-restore

      - name: List produced artifacts
        shell: pwsh
        run: |
          $out = Join-Path (Split-Path $env:PROJECT_PATH) "bin\$env:CONFIG"
          Write-Host "Output directory: $out"
          if (Test-Path $out) {
            Get-ChildItem -Path $out -Recurse -Include *.dll,*.pdb,*.nupkg,*.snupkg |
              Select-Object Name, FullName, Length |
              Format-Table -AutoSize
          } else {
            Write-Host "No output directory found."
          }
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build
          path: pluginpoc/bin/${{ env.CONFIG }}/
          if-no-files-found: error

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
        with:
          add-tools-to-path: true

      - name: Deploy
        shell: pwsh
        run: |
          # Discover build output directory
          $outDir = Join-Path (Join-Path $PWD "pluginpoc") "bin\$env:CONFIG"
          if (-not (Test-Path $outDir)) { Write-Error "Output directory not found: $outDir"; exit 1 }

          # Find latest nupkg
          $nupkg = Get-ChildItem $outDir -Filter *.nupkg -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $nupkg) { Write-Error "No .nupkg file found in $outDir"; exit 1 }

          # Find plugin DLL recursively (matching project name pattern)
          $dll = Get-ChildItem -Path $outDir -Recurse -Filter pluginpoc*.dll -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $dll) { Write-Error "No plugin DLL (pluginpoc*.dll) found under $outDir (searched recursively)"; exit 1 }

          Write-Host "Discovered package: $($nupkg.Name)"
          Write-Host "Discovered dll:     $($dll.Name)"

          pac auth create -env ${{ secrets.POWERPLATFORM_URL }} -id ${{ secrets.CLIENT_ID }} -cs ${{ secrets.CLIENT_SECRET }} -t ${{ secrets.TENANT_ID }} -ci China

          # Deploy using discovered nupkg
          pac plugin push -id ${{ secrets.PLUGINPACKAGE_ID }} -env ${{ secrets.POWERPLATFORM_URL }} -pf $($nupkg.FullName) -t Nuget

          pac auth clear

